import java.nio.file.Files
import java.nio.file.Paths

// TODO tie this into the normal gradle-mvn-push script
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

// Load `secret.properties` file, if it exists. You can put your bintrayUser and bintrayApiKey values there, that file is ignored by git
if (Files.exists(Paths.get("$project.rootDir/secret.properties"))) {
    def localProperties = new Properties()
    localProperties.load(new FileInputStream("$project.rootDir/secret.properties"))
    localProperties.each { prop -> project.ext.set(prop.key, prop.value) }
}

def findProperty(String key) {
    [project.properties[key], System.getenv(key)].find { it != null }
}

dokkaHtml {
    outputDirectory = "$buildDir/dokka"
    dokkaSourceSets {
        commonMain {}
        jvmMain {
            dependsOn(commonMain)
        }
        jsMain {
            dependsOn(commonMain)
        }
        iosMain {
            dependsOn(commonMain)
        }
    }
}

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return findProperty('RELEASE_REPOSITORY_URL') ?: "https://api.bintray.com/maven/$BINTRAY_ORG/$BINTRAY_REPOSITORY/$POM_ARTIFACT_ID;publish=1"
}

def getSnapshotRepositoryUrl() {
    return findProperty('SNAPSHOT_REPOSITORY_URL') ?: "https://oss.jfrog.org/artifactory/oss-snapshot-local"
}

def getRepositoryUsername() {
    return findProperty('BINTRAY_USER') ?: "no.bintray.user"
}

def getRepositoryPassword() {
    return findProperty('BINTRAY_API_KEY') ?: "no.bintray.api.key"
}

task emptySourcesJar(type: Jar) {
    archiveClassifier.set("sources")
}

task javadocsJar(type: Jar, dependsOn: dokkaHtml) {
    archiveClassifier.set("javadoc")
    from dokkaHtml.outputDirectory
}

//signing {
//    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
//    sign(publishing.publications)
//}

publishing {
    publications.all {
        artifact javadocsJar

        pom.withXml {
            def root = asNode()

            root.children().last() + {
                resolveStrategy = Closure.DELEGATE_FIRST

                description POM_DESCRIPTION
                name POM_NAME
                url POM_URL
                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution POM_LICENCE_DIST
                    }
                }
                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }

    afterEvaluate {
        publications.getByName('kotlinMultiplatform') {
            // Source jars are only created for platforms, not the common artifact.
            artifact emptySourcesJar
        }
    }

    repositories {
        maven {
            url isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
        }
        maven {
            name 'test'
            url "file://${rootProject.buildDir}/localMaven"
        }
    }
}

afterEvaluate {
    // Remove gradle metadata publishing from all targets which are not native
    kotlin.targets.all { target ->
        if (target.platformType.name != 'native') {
            def publication = publishing.publications[targetName]
            publication.moduleDescriptorGenerator = null
        }
    }
}
