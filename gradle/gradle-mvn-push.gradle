import java.nio.file.Files
import java.nio.file.Paths

apply plugin: 'com.vanniktech.maven.publish'
apply plugin: "org.jetbrains.dokka"

dokka {
    outputDirectory = "$buildDir/dokka"
    outputFormat = "html"
}

// Load `secret.properties` file, if it exists. You can put your bintrayUser and bintrayApiKey values there, that file is ignored by git
if (Files.exists(Paths.get("$project.rootDir/secret.properties"))) {
    def localProperties = new Properties()
    localProperties.load(new FileInputStream("$project.rootDir/secret.properties"))
    localProperties.each { prop -> project.ext.set(prop.key, prop.value) }
}

def findProperty(String key) {
    [project.properties[key], System.getenv(key)].find { it != null }
}

def getReleaseRepositoryUrl() {
    return findProperty("RELEASE_REPOSITORY_URL") ?: "https://api.bintray.com/maven/$BINTRAY_ORG/$BINTRAY_REPOSITORY/$POM_ARTIFACT_ID"
}

def getSnapshotRepositoryUrl() {
    return findProperty("SNAPSHOT_REPOSITORY_URL") ?: "https://oss.jfrog.org/artifactory/oss-snapshot-local"
}

def getRepositoryUsername() {
    return findProperty("BINTRAY_USER") ?: "no.bintray.user"
}

def getRepositoryPassword() {
    return findProperty("BINTRAY_API_KEY") ?: "no.bintray.api.key"
}

mavenPublish {
    releaseSigningEnabled = false
    targets {
        uploadArchives {
            releaseRepositoryUrl = getReleaseRepositoryUrl()
            snapshotRepositoryUrl = getSnapshotRepositoryUrl()
            repositoryUsername = getRepositoryUsername()
            repositoryPassword = getRepositoryPassword()
        }
        installArchives {
            releaseRepositoryUrl = file("${rootProject.buildDir}/localMaven").toURI().toString()
            snapshotRepositoryUrl = file("${rootProject.buildDir}/localMaven").toURI().toString()
        }
    }
}

if (project.plugins.hasPlugin("org.jetbrains.kotlin.multiplatform")) {
    apply from: rootProject.file("gradle/gradle-mvn-mpp-push.gradle")
}
