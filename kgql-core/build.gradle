apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'maven-publish'

archivesBaseName = 'kgql-core'

kotlin {
    jvm()
    js()
    ios {
        binaries {
            framework()
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation deps.kotlin.stdlib.common
                api deps.kotlin.serialization.common
            }
        }
        commonTest {
            dependencies {
                implementation deps.kotlin.test.common
                implementation deps.kotlin.test.commonAnnotations
            }
        }
        jvmMain {
            dependencies {
                implementation deps.kotlin.stdlib.jdk7
                api deps.kotlin.serialization.jvm
            }
        }
        jvmTest {
            dependencies {
                implementation deps.kotlin.test.jvm
                implementation deps.kotlin.test.junit
            }
        }
        jsMain {
            dependencies {
                implementation deps.kotlin.stdlib.js
                api deps.kotlin.serialization.js
            }
        }
        jsTest {
            dependencies {
                implementation deps.kotlin.test.js
            }
        }
        iosMain {
            dependencies {
                api deps.kotlin.serialization.native
            }
        }
        iosTest {
        }
    }
}

configurations {
    compileClasspath
}

afterEvaluate {
    // Alias the task names we use elsewhere to the new task names.
    tasks.create('install').dependsOn('publishKotlinMultiplatformPublicationToMavenLocal')
    tasks.create('installLocally') {
        dependsOn 'publishKotlinMultiplatformPublicationToTestRepository'
        dependsOn 'publishJvmPublicationToTestRepository'
        dependsOn 'publishJsPublicationToTestRepository'
        dependsOn 'publishMetadataPublicationToTestRepository'
    }
    tasks.create('installIosLocally') {
        dependsOn 'publishKotlinMultiplatformPublicationToTestRepository'
//        dependsOn 'publishIosArm32PublicationToTestRepository'
        dependsOn 'publishIosArm64PublicationToTestRepository'
        dependsOn 'publishIosX64PublicationToTestRepository'
    }
    // NOTE: We do not alias uploadArchives because CI runs it on Linux and we only want to run it on Mac OS.
    //tasks.create('uploadArchives').dependsOn('publishKotlinMultiplatformPublicationToMavenRepository')

//    tasks.create('publishToMavenRepository') {
//        dependsOn 'publishKotlinMultiplatformPublicationToMavenRepository'
//        dependsOn 'publishIosArm32PublicationToMavenRepository'
//        dependsOn 'publishIosArm64PublicationToMavenRepository'
//        dependsOn 'publishIosX64PublicationToMavenRepository'
//        dependsOn 'publishJsPublicationToMavenRepository'
//        dependsOn 'publishJvmPublicationToMavenRepository'
//        dependsOn 'publishMetadataPublicationToMavenRepository'
//    }
//
//    tasks.create('publishToTestRepository') {
//        dependsOn 'publishKotlinMultiplatformPublicationToTestRepository'
//        dependsOn 'publishIosArm32PublicationToMavenRepository'
//        dependsOn 'publishIosArm64PublicationToTestRepository'
//        dependsOn 'publishIosX64PublicationToTestRepository'
//        dependsOn 'publishJsPublicationToTestRepository'
//        dependsOn 'publishJvmPublicationToTestRepository'
//        dependsOn 'publishMetadataPublicationToTestRepository'
//    }
}

//apply from: "$rootDir/gradle/publish-mpp.gradle"
apply from: "$rootDir/gradle/gradle-mvn-mpp-push.gradle"

publishing {
    publications.all { publication ->
        if (publication.name == 'kotlinMultiplatform') {
            // for our root metadata publication, set artifactId with a package and project name
            publication.artifactId = "$POM_ARTIFACT_ID"
        } else {
            // for targets, set artifactId with a package, project name and target name (e.g. iosX64)
            publication.artifactId = "$POM_ARTIFACT_ID-${publication.name}"
        }
    }
}
